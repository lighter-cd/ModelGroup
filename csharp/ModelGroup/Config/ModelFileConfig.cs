//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18408
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using LitJson;

namespace ModelGroup.Config
{
	public class ModelFileConfig
	{
		private Dictionary<String,Enum.Enumeration> _dictEnumParams;	// 所有枚举列表的集合
		private List<Resource.ResourceType> _listModelTypes;	// 所有资源的集合
		private String _path;

		private static ModelFileConfig instance = null;

		public static ModelFileConfig Instance
		{
			get {
				if (instance == null) {
						instance = new ModelFileConfig ();
				}
				return instance;
			}
		}

		public ModelFileConfig ()
		{
			if (instance != null)
			{
				return;
			}
			_dictEnumParams = new Dictionary<string, ModelGroup.Config.Enum.Enumeration> ();
			_listModelTypes = new List<ModelGroup.Config.Resource.ResourceType> ();
		}

		public String path 
		{
			get {return _path;}
			set {_path = value;}
		}

		public Enum.Enumeration getEnumParam(String name)
		{
			if (_dictEnumParams.ContainsKey (name)) {
				return _dictEnumParams[name];
			}
			return null;
		}

		public int modelGroupTypes
		{
			get {return _listModelTypes.Count;}
		}
		public Resource.ResourceType getModelGroupType(int index)
		{
			if (index >= 0 && index < _listModelTypes.Count) {
				return _listModelTypes [index];
			}
			return null;
		}
		public Resource.ResourceType getModelGroupType(String name)
		{
			foreach (Resource.ResourceType g in _listModelTypes) {
				if(g.Name == name){
					return g;
				}
			}
			return null;
		}

		private bool loadEnums(String _enum)
		{
			JsonData jd = JsonMapper.ToObject (_enum);
			if (jd.IsArray)
			{
				foreach(JsonData item in jd) 
				{
					if(item.Keys.Contains("name") && item.Keys.Contains("alias"))
                    {
						Enum.Enumeration ep = new Enum.Enumeration((String)item["name"],(String)item["alias"]);
                        if (item.Keys.Contains("item"))
                        {
                            JsonData subItems = item["item"];
                            if (subItems.IsArray)
                            {
                                foreach (JsonData subItem in subItems)
                                {
                                    if (subItem.Keys.Contains("ID") && subItem.Keys.Contains("name") && subItem.Keys.Contains("alias"))
                                    {
                                        ep.addItem((uint)(int)subItem["ID"], (String)subItem["name"], (String)subItem["alias"]);
                                    }
                                    else
                                    {
                                        //报错
                                    }
                                }
                            }
                            else
                            {
                                if (subItems.Keys.Contains("ID") && subItems.Keys.Contains("name") && subItems.Keys.Contains("alias"))
                                {
                                    ep.addItem((uint)subItems["ID"], (String)subItems["name"], (String)subItems["alias"]);
                                }
                                else
                                {
                                    //报错
                                }
                            }
                            _dictEnumParams[(String)item["name"]] = ep;
                        }
                        else
                        {
                            // 报错
                        }
                    }
                    else
                    {
                        // 报错
                    }
				}
			}
			
			return true;
		}
        private bool loadRes(String res)
        {
 			JsonData jd = JsonMapper.ToObject (res);
			if (jd.IsArray)
			{
                foreach (JsonData itemModelType in jd)
                {
                    if (itemModelType.Keys.Contains("name") && itemModelType.Keys.Contains("alias"))
                    {
                        Resource.ResourceType mt = new Resource.ResourceType((String)itemModelType["name"], (String)itemModelType["alias"]);
                        if (itemModelType.Keys.Contains("type"))
                        {
                            JsonData arrayResource = itemModelType["type"];
                            if (arrayResource.IsArray)
                            {
                                foreach (JsonData resource in arrayResource)
                                {
                                    newResource(mt, resource);
                                }
                            }
                            else 
                            {
                                newResource(mt, arrayResource);
                            }
                            _listModelTypes.Add(mt);
                        }
                        else
                        {
                            // 报错
                        }
                    }
                    else
                    {
                        //报错
                    }
                }
            }
 
            return true;
        }

        public bool loadConfig(String _enum,String _res)
        {
            if (loadEnums(_enum))
            {
                return loadRes(_res);
            }
            return false;
        }

        private void newResource(Resource.ResourceType mt,JsonData resource)
        {
            Resource.FormatFile.FileType type = (resource.Keys.Contains("type")) ?
                  (Resource.FormatFile.FileType)(int)resource["type"] : Resource.FormatFile.FileType.FT_MODEL;

            Resource.Componets componets = 0;
            if (resource.Keys.Contains("bone") && (int)resource["bone"]==1)
            {
                componets |= Resource.Componets.Skeleton;
            }
            if (resource.Keys.Contains("mesh") && (int)resource["mesh"]==1)
            {
                componets |= Resource.Componets.Mesh;
            }
            if (resource.Keys.Contains("anim") && (int)resource["anim"]==1)
            {
                componets |= Resource.Componets.Animate;
            }
            if (resource.Keys.Contains("ashook") && (int)resource["ashook"]==1)
            {
                componets |= Resource.Componets.Hook;
            }
            if (resource.Keys.Contains("camera") && (int)resource["camera"] == 1)
            {
                componets |= Resource.Componets.Camera;
            }
            if (resource.Keys.Contains("light") && (int)resource["light"]==1)
            {
                componets |= Resource.Componets.Light;
            }

            mt.addResource(new Resource.Resource((String)resource["name"],
                (String)resource["alias"], (uint)componets, (String)resource["file"], type));
        }
	}
}

