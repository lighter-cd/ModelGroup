//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18408
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using Newtonsoft.Json;
using Newtonsoft.Json.Bson;
using ModelGroup.Config.JObject;

namespace ModelGroup.Config
{
	public class ModelFileConfig
	{
		private Dictionary<String,Enum.Enumeration> _dictEnumParams;	// 所有枚举列表的集合
		private List<Resource.ResourceType> _listModelTypes;	        // 所有资源的集合
        private Flags _componets;
		private String _path;

		private static ModelFileConfig instance = null;

		public static ModelFileConfig Instance
		{
			get {
				if (instance == null) {
						instance = new ModelFileConfig ();
				}
				return instance;
			}
		}

		public ModelFileConfig ()
		{
			if (instance != null)
			{
				return;
			}
			_dictEnumParams = new Dictionary<string, ModelGroup.Config.Enum.Enumeration> ();
			_listModelTypes = new List<ModelGroup.Config.Resource.ResourceType> ();
		}

		public String path 
		{
			get {return _path;}
			set {_path = value;}
		}

		public Enum.Enumeration getEnumParam(String name)
		{
			if (_dictEnumParams.ContainsKey (name)) {
				return _dictEnumParams[name];
			}
			return null;
		}

		public int modelGroupTypes
		{
			get {return _listModelTypes.Count;}
		}
		public Resource.ResourceType getModelGroupType(int index)
		{
			if (index >= 0 && index < _listModelTypes.Count) {
				return _listModelTypes [index];
			}
			return null;
		}
		public Resource.ResourceType getModelGroupType(String name)
		{
			foreach (Resource.ResourceType g in _listModelTypes) {
				if(g.Name == name){
					return g;
				}
			}
			return null;
		}

		private bool loadEnums(byte[] _enum)
		{
            MemoryStream ms = new MemoryStream(_enum);
            using (BsonReader reader = new BsonReader(ms))
            {
                JsonSerializer serializer = new JsonSerializer();
                Enums enums = serializer.Deserialize<Enums>(reader);

                foreach(Enumeration e in enums.enums)
                {
                    Enum.Enumeration _ee = new Enum.Enumeration(e.name, e.alias);
                    foreach(Item i in e.item)
                    {
                        _ee.items.Add(new Enum.Item((uint)i.ID, i.name, i.alias));
                    }
                    _dictEnumParams[e.name] = _ee;
                }
            }
            return true;
		}
        private bool loadRes(byte[] res)
        {
           MemoryStream ms = new MemoryStream(res);
           using (BsonReader reader = new BsonReader(ms))
           {
               JsonSerializer serializer = new JsonSerializer();
               JObject.Resource r = serializer.Deserialize<JObject.Resource>(reader);

               _componets = new Flags(r.components);
               Resource.Resource._componetsDef = _componets;

               foreach(Group g in r.resources)
               {
                   Resource.ResourceType _r = new Resource.ResourceType(g.name,g.alias);
                   foreach(ResourceType rt in g.type)
                   {
                       _r.addResource(new Resource.Resource(rt.name, rt.alias, _componets.GetBits(rt.components), rt.file));
                   }
                   _listModelTypes.Add(_r);
               }
           }
           return true;
        }

        public bool loadConfig(byte[] _enum, byte[] _res)
        {
            if (loadEnums(_enum))
            {
                return loadRes(_res);
            }
            return false;
        }
	}
}

